/*编写一个 stack栈类，在上一题的基础上：

增加：带一个参数 s 的构造函数，s 表示栈的初始大小。这个构造函数在最后输出一行：

“constructor 2”。它的意思是第2个构造函数，是为了区分第1个构造函数输出的 “constructing”

由于栈的存储空间不再固定大小了，请思考是否需要增加一个数据成员以记录当前的空间大小

增加：析构函数，如果有动态申请的内存，释放之
C++中，用 new 替代 malloc()， delete 替代 free() 。

输入描述

在你的 main 函数中，首先使用带参数的构造函数创建一个栈对象，栈的大小由输入的第一行的正整数 s 决定。

第二行是命令的数量 n

接下来 n 行，每行是一条命令

输出描述

对第 3、4、5 类命令，输出一行：该命令对应取得的结果*/

#include <iostream>
using namespace std;
class myStack {
public:
    myStack(int s) : data(new int[s]), tt(-1), len(s) {
        cout << "constructor 2" << endl;
    }

    ~myStack() {
        delete[] data;
        cout << "destructing" << endl;
    }

    bool isEmpty() const {
        return tt == -1;
    }

    bool isFull() const {
        return tt == len - 1;
    }

    void push(int a) {
        if (!isFull()) {
            data[++tt] = a;
        }
        else
        {
            return;
        }
    }

    void pop() {
        if (!isEmpty()) {
            --tt;
        }
        else
        {
            return;
        }
    }

    bool top(int& a) const {
        if (!isEmpty()) {
            a = data[tt];
            return true;
        }
        return false;
    }

    int size() const {
        return tt + 1;
    }

    void output() const {
        if (isEmpty())
            return;
        else
        {
            for (int i = 0; i <= tt; ++i)
            {
                cout << data[i] << " ";
            }
            cout << endl;
        }
    }
private:
    int* data;
    int tt;
    int len;

};

int main() {
    int n, s;
    cin >> s >> n;

    myStack t(s);

    for (int i = 0; i < n; ++i) {
        int choice;
        cin >> choice;

        switch (choice) {
        case 1: {
            int a;
            cin >> a;
            t.push(a);
            break;
        }
        case 2:
            t.pop();
            break;
        case 3: {
            int a;
            if (t.top(a)) {
                cout << a << endl;
            }
            break;
        }
        case 4:
            cout << t.size() << endl;
            break;
        case 5:
            t.output();
            break;
        }
    }

    return 0;
}
