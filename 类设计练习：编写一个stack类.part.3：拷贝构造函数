/*编写一个 stack栈类，在上一题的基础上：

增加：拷贝构造函数，实现深拷贝。拷贝函数最后要输出一行：copy constructor

输入描述

两部分：第一部分是作用在第一个栈对象的 n 条命令，第二部分是作用在第二个栈对象的 m 条命令。

第一行是一个整数 S，表示创建一个容量为 S 的栈对象。

接下来一行是一个整数 n，表示接下来 n 行是作用在第一个栈对象的 n 条命令

接下来 n 行，每行是一条命令

然后在 main 函数中，用拷贝构造函数创建出第二个栈对象

接下来是一个整数 m，表示接下来 m 行是作用在第二个栈对象的 m 条命令

接下来 m 行，每行是一条命令

输出描述

对第3、4、5类命令，输出一行：该命令对应取得的结果*/

#include <iostream>
using namespace std;
class myStack {
public:
    myStack(int s) : data(new int[s]), tt(-1), len(s) {
        cout << "constructor 2" << endl;
    }

    ~myStack() {
        delete[] data;
        cout << "destructing" << endl;
    }

    myStack(myStack& b)
    {
        len = b.len;
        tt = b.tt;
        data = new int[len];
        for (tt = 0; tt < len; tt++)
        {
            data[tt] = b.data[tt];
        }
        cout << "copy constructor" << endl;
    }

    bool isEmpty() const {
        return tt == -1;
    }

    bool isFull() const {
        return tt == len - 1;
    }

    void push(int a) {
        if (!isFull()) {
            data[++tt] = a;
        }
        else
        {
            return;
        }
    }

    void pop() {
        if (!isEmpty()) {
            --tt;
        }
        else
        {
            return;
        }
    }

    bool top(int& a) const {
        if (!isEmpty()) {
            a = data[tt];
            return true;
        }
        return false;
    }

    int size() const {
        return tt + 1;
    }

    void output() const {
        if (isEmpty())
            return;
        else
        {
            for (int i = 0; i <= tt; ++i)
            {
                cout << data[i] << " ";
            }
            cout << endl;
        }
    }

private:
    int* data;
    int tt;
    int len;

};


void AnotherMain(int num, myStack& p)
{
    int choice;
    for (int i = 0; i < num; i++)
    {
        cin >> choice;
        switch (choice)
        {
        case 1:
            int a;
            cin >> a;
            p.push(a);
            break;
        case 2:
            p.pop();
            break;
        case 3:
            int b;
            if (p.top(b)) {
                cout << b << endl;
            }
            break;
        case 4:
            cout << p.size() << endl;
            break;
        case 5:
            p.output();
            break;
        }
    }
}

int main() {
    int n, S;
    cin >> S >> n;

    myStack t(S);

    for (int i = 0; i < n; ++i) {
        int choice;
        cin >> choice;

        switch (choice) {
        case 1: {
            int a;
            cin >> a;
            t.push(a);
            break;
        }
        case 2:
            t.pop();
            break;
        case 3: {
            int a;
            if (t.top(a)) {
                cout << a << endl;
            }
            break;
        }
        case 4:
            cout << t.size() << endl;
            break;
        case 5:
            t.output();
            break;
        }
    }


    int m;
    myStack p(t);
    cin >> m;
    AnotherMain(m,t);
    return 0;
}
