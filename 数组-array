//使用 STL容器 array 完成以下操作。
创建两个数组 a1, a2。
使用正向迭代器遍历 a1，求 a1 的前缀和。
使用反向迭代器遍历 a2，求 a2 的元素之和。
通过下标[ ]、at()、front()、back()、data()等函数访问array容器内的元素。
使用fill()、swap()函数。
使用 > < == 等符号对两个array数组容器进行比较。
完成以下代码

#include <iostream>
#include <>   /// array的头文件
using namespace std;

const int N = 10;

int main() {
    /// 创建一个容量为 10 的数组 a1 ，容器规定第二个参数 N 必须是常量表达式
    /// 读入 N 个元素 [] 或 at()

    /// 创建一个容量为 10 的数组 a2
    /// 读入N个元素 [] 或 at()

    /// 使用正向迭代器遍历 a1，求 a1 的前缀和

    /// 使用反向迭代器遍历 a2，求 a2 的元素和

    /// 输出 a1 的部分元素
    cout <<             /// 首元素 front()
    << ' ' <<           /// 尾元素 back()
    << ' ' <<           /// 中间位置的元素 at( N / 2 )
    << ' ' <<           /// 首元素的内存地址 data()
    << endl;

    /// 比较两个数组
    /// 如果 a1 小于 a2，输出 a1 < a2
    /// 如果 a1 大于 a2，输出 a1 > a2

    /// 把 a1 整体赋值给 a2
    /// 比较a1, a2是否相等，如果相等，输出 a1 == a2

    /// a1 填充 1  fill()
    /// a2 填充 10
    /// 整体交换 a1, a2  swap()
    /// 输出 a1 各元素 [] 或 at()

    return 0;
}


#include<iostream>
#include<array>
using namespace std;
const int N = 10;
int main() {
    /// 创建一个容量为 10 的数组 a1 ，容器规定第二个参数 N 必须是常量表达式
    array<int, N> a1{ 0 };
    /// 读入 N 个元素 [] 或 at()
    for (int i = 0; i < N; i++)
    {
        cin >> a1[i];
    }
    /// 创建一个容量为 10 的数组 a2
    array<int, N> a2{0};
    /// 读入N个元素 [] 或 at()
    for (int i = 0; i < N; i++)
    {
        cin >> a2[i];
    }
    /// 使用正向迭代器遍历 a1，求 a1 的前缀和
    array<int, N> sums = a1;
    for (int i = 1; i < N; i++)
    {
        sums[i] += sums[i - 1];
    }
    for (const int& num : sums)
    {
        cout << num << " ";
    }
    cout << endl;
    /// 使用反向迭代器遍历 a2，求 a2 的元素和
    int b = 0;
    for (auto it = a2.rbegin(); it != a2.rend(); it++)
    {
        b += *it;
    }
    cout << b << endl;
    /// 输出 a1 的部分元素
    cout <<  a1.front()           /// 首元素 front()
        << ' ' <<   a1.back()        /// 尾元素 back()
        << ' ' <<    a1.at(N/2)       /// 中间位置的元素 at( N / 2 )
        << ' ' <<    static_cast<void*>(a1.data())       /// 首元素的内存地址 data()
        << endl;

    /// 比较两个数组
    /// 如果 a1 小于 a2，输出 a1 < a2
    /// 如果 a1 大于 a2，输出 a1 > a2
    if (a1 < a2)
        cout << "a1 < a2" << endl;
    else
        cout << "a1 > a2" << endl;
    /// 把 a1 整体赋值给 a2
    a2=a1;
    /// 比较a1, a2是否相等，如果相等，输出 a1 == a2
    if (a1 == a2)
        cout << "a1 == a2" << endl;
    /// a1 填充 1  fill()
    a1.fill(1);
    /// a2 填充 10
    a2.fill(10);
    /// 整体交换 a1, a2  swap()
    swap(a1, a2);
    /// 输出 a1 各元素 [] 或 at()
    for (int i = 0; i < N; i++)
    {
        cout << a1[i] << " ";
    }
    cout << endl;
    return 0;
}
